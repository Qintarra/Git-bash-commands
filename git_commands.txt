Creating ssh key and set global user and email

ssh-keygen -t rsa  -C "e@mail"
git config --global user.name "Username"
git config --global user.email "e@mail"

git clone <url> –  download projecct from remote repo

git init <directory name> – create a local repo

git status –  check the untracked and tracked files and changes
git status -s – short list of changes

git diff – show changes in files that have not yet been added to the commit index (staged)
git diff --staged –  show what has been added to the index with git add, but has not yet been committed
git diff HEAD –  show what has changed since the last commit
git diff HEAD^ –  show what has changed since the penultimate commit
git diff <branch> –  compare the current branch with the given one
git difftool -d is the same as diff but shows the changes in the given difftool
git difftool -d master.. –  show the changes made in the current branch
git diff --stat –  show statistics of which files have been changed and how
git diff <file-branch>..<second-branch> – see the differences between two given branches

git add <filename> –  stages the file 
git add . –  stage all files
git add *.txt – stage all txt files

git commit -m <message> – commit all staged files with given message
git commit --amend -m <message> – add changes to the last commit

git log – shows a list of all the commits made to a repository
git log --follow <file> – list changes to the current file, including renames
git log --no-merges main.. – view the change history for the current branch only

git reset <file> – remove files from the commit index (changes are not lost)
git reset –  remove the current HEAD to the specified state (undo git add)
git reset --soft <commit>	 –  does not touch the index file or the working tree
git reset --hard <commit> –  resets the index and working tree. Any changes to tracked files in the working tree since <commit> are discarded.
git reset --hard HEAD~3 – the last three commits (HEAD, HEAD^, and HEAD~2) were bad and you do not want to ever see them again. (Do not do this if you have already given these commits to somebody else.)

git checkout –  switch (git switch) branches or restore (git restore) working tree files
git checkout -- <file> –  discard local changes in file
git checkout . –  discard local changes in all files

git clean 	–  remove untracked files from the working tree
git clean -n	–  to see a dry run
git clean -f	–  to force untracked file deletion
git clean -f -d 	–  to remove untracked directories
git clean -f -x	–  to remove untracked .gitignore files
git clean -i 	–  switch to do an interactive ‘git clean’
git clean -xdf

git restore --staged <file> –  unstage file

git revert <commit> –  revert some existing commits

gitignore 	–  specifies intentionally untracked files to ignore
	*.log	–  no .log files
	!error.log	–  but do track error.log file, even thou we ignoring .log files above
	/TODO 	–  only ignore the TODO file in the current directory, not subdir /TODO
	build/	–  ignore all files on the build/ directory
	doc/*.txt	–  ignore doc/notes.txt, but not doc/server/arch.txt
	doc/**/*.pdf	–  ignore all .pdf files in the doc/ directory
git ls-files --other --ignored --exclude-standard – lists all ignored files

git show-branch -a – show both remote-tracking branches and local branches
git branch <branch name> –  create a new branch
git checkout -b <branch name>	–  create a new branch and switch to it 
git branch -d <branch> – delete a merged branch (-D to delete branch whether merged or not)
git branch -m <oldname> <newname> – rename the branch

git merge –  join two or more development histories together
git merge <branch> –  merge changes from current branch into specified
git merge --no-ff <branch> – merge branches without "fast forward" mode
git merge <bookmark>/<branch> - merge the changes of the local branch and the given remote branch

git fetch <url> –  fetch the entire history from the given remote repository

git pull (git fetch + git merge)	– update the local version of a repository from a remote
git pull <remote><branch> – Specify a specific remote branch to merge

git remote – view a list of available remote repositories (-v for detailed list)
git remote add <remote><url> – add a new remote repository
git remote remove <name> –  remove the remote named
git remote rename <old> <new> –  rename

git push –  send (push) the commits from local branch in local repository to the remote repository
git push <remote> <branch> –  push a branch to the specified repository and remote branch
git push <bookmark> :<branch> –  delete the specified branch in the remote repository
git push -u origin master –  if the remote branch is not set as tracked, then make it so
git push --set-upstream origin <branch>

git mv <file-original> <file-renamed> – change filename and add to commit index

git rm <file> – remove a file from the working directory and add information about the removal to the index
git rm --cached <file> – delete the file from the repository but keep it locally

git stash –  saves the uncommitted changes locally, allowing to make changes, switch branches, and perform other git operations
git stash save <stashname> – save working directory to the stash
git stash list	–  view stashes
git stash pop | apply –  bring back and reomve from stash |leave in
git stash drop –  remove stash

Conflict solving:
	git merge --abort	–  abort merge
	git checkout --Xours --Xtheirs	–  resolve by selecting version
	git diff	–  resolve manualy
	git revert 5b14fc	–  undo merge
	user merge tool
	
To avoid confilcts: 
	Use short commits	(10 short comits better then 1 large)
	No edits to whitespaces (tab, spaces, linebreaks)
	Merge ofthen


